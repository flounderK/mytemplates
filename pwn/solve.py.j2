#!/usr/bin/env python3
from pwn import *
import monkeyhex
import time
import argparse
import re
from functools import partial
import logging

# Run with ipython3 -i solve.py -- DEBUG <one_gadget>

parser = argparse.ArgumentParser()
parser.add_argument("one_gadget", type=partial(int, base=0), nargs=argparse.REMAINDER)
argparse_args = parser.parse_args()

# context.log_level = 'debug'
context.terminal = ['gnome-terminal', '-e']

# default libc path for some dists is /usr/lib/libc.so.6
# lib = ELF('/lib/x86_64-linux-gnu/libc.so.6') if not args.REMOTE else ELF('{{ libc_path|d('libc.so.6', true) }}')
# lib.sym['binsh'] = lib.offset_to_vaddr(lib.data.find(b'/bin/sh'))
# lib.sym['one_gadget'] = argparse_args.one_gadget[0] if argparse_args.one_gadget else 0
binary = context.binary = ELF('{{ binary_path }}')

def attach_gdb(p, commands=None):
    """Template to run gdb with predefined commands on a process."""
    val = """
    c
    """ if commands is None else commands
    res = gdb.attach(p, val)
    pause()
    return res


def new_proc(start_gdb=False, val=None):
    """Start a new process with predefined debug operations"""
    env = dict()
    # env['LD_LIBRARY_PATH'] = os.getcwd()
    # patchelf --set-interpreter "$(ls ld-*.so)" {{ binary_path }}
    # ln -s libc-*.so libc.so.6
    p = process(binary.path, env=env)
    if start_gdb is True:
        attach_gdb(p, val)
    return p

def bnot(n, numbits=context.bits):
    return (1 << numbits) -1 -n

def align(val, align_to):
    return val & bnot(align_to - 1)

def batch(it, sz):
    length = len(it)
    for i in range(0, length, sz):
        yield it[i:i+sz]
{% if BOF_CHECK is defined -%}
def bof_check():
    """Check a local process for easy to detect
    buffer overflow"""
    if hasattr(p, "proc") is False:
        return 0, None
    if p.poll() is None or p.poll() >= 0:
        return 0, None

    c = p.corefile
    log.success("Fault addr %#x", c.fault_addr)
    rsp_offset = c.sp - c.stack.address
    data_at_rsp_offset = c.stack.data[rsp_offset:rsp_offset+context.bytes]
    code_near_pc = c.disasm(c.pc, 16)
    on_ret_instr = False
    if len(code_near_pc) > 0:
        current_instr_ln = code_near_pc.splitlines()[0]
        on_ret_instr = bool(re.search('(?i)RET', current_instr_ln))
    log.success("data at rsp %s", data_at_rsp_offset)
    offset = cyclic_find(data_at_rsp_offset[:4])
    if (offset != -1 or c.fault_addr == data_at_rsp_offset) \
       and on_ret_instr is True:
        log.success("Looks like the next return address was overwritten!")
        log.success("offset %#x", offset)
        # for i in c.registers.items():
        #     log.success("%s: %#x" % (i))
    return offset, c

{%- endif %}
p = new_proc(context.log_level == logging.DEBUG) if not args.REMOTE else remote('{{ remote_host|d("localhost", true) }}', {{ port|d(8000, true) }})
# do leak / payload gen here

payload = b''
{% if JOP is defined -%}
# just to track which gadgets are actually being used
used_dt_gadgets = set()

# table of gadget addresses
dispatch_table = [
    b'/bin/sh\x00',  # only allowed because is 8 bytes
    # dispatch gadget here

]

# start of controlled input (needs leak)
stack_loc = 0

# index where the dispatch table may not extend past
dispatch_table_limit = 0xb0
# offset of dispatch table from start of input
dispatch_table_offset = dispatch_table_limit - (len(dispatch_table)*8)
# dispatch_table_addr on stack
dta = stack_loc + dispatch_table_offset


def dta_for(gadget):
    """Just to make payload more readable,
    because actual instr has to be an address that contains
    the address of a gadget ('jmp rdx' vs 'jmp [rdx]')"""
    # convert gadget symbol name to address
    if isinstance(gadget, str):
        gadget = binary.sym[gadget]

    used_dt_gadgets.add(gadget)
    return dta + (dispatch_table.index(gadget)*8)


payload = flat({
    # dispatch table
    dispatch_table_offset: dispatch_table
})
{%- endif %}
# p.send(cyclic(0x200) + b'\n')
# p.interactive()
