#!/usr/bin/env pypy3
import angr
import claripy
import monkeyhex


project_kwargs = dict()
project_kwargs['auto_load_libs'] = {{ 'True' if AUTO_LOAD_LIBS is defined else 'False' }}
{% if USE_SIMPROCS is defined -%}
project_kwargs['use_sim_procedures'] = True
{%- endif %}
project = angr.Project('{{ binary_path }}', **project_kwargs)
{% if CFG is defined -%}
cfg = project.analyses.CFG()
{%- endif %}

{% if ASCIIONLY is defined -%}
def ascii_only_constraint(variable, state):
    for b in variable.chop(8):
        state.add_constraints(claripy.And(b >= 0x20, b < 0x7f))
{%- endif %}
kwargs = {}

simgr_kwargs = {}
{% if UNCONSTRAINED is defined -%}
simgr_kwargs['save_unconstrained'] = True
kwargs['add_options'] = {angr.sim_options.REVERSE_MEMORY_NAME_MAP, angr.sim_options.TRACK_ACTION_HISTORY}
{%- endif %}
{% if STDIN is defined -%}
buf_len = 16
stdin_bvs = claripy.BVS('stdin_bvs', buf_len*8)
kwargs['stdin'] = stdin_bvs   # angr.SimFileStream(name='stdin', content=stdin_bvs, has_end=False)
{%- endif %}
{% if start_addr is defined -%}
kwargs['addr'] = {{ start_addr | int| hex }}
{%- endif %}
initial_state = project.factory.{{ 'entry_state' if start_addr is not defined else 'blank_state'}}(**kwargs)
{% if SYM_STACK is defined -%}
initial_state.regs.rbp = initial_state.regs.rsp
buf_len = 16
stack_var0 = claripy.BVS('stack_var0', buf_len*8)
padding_length_in_bytes = buf_len
initial_state.regs.rsp -= padding_length_in_bytes

initial_state.stack_push(stack_var0)
{%- endif %}

def is_successful(state):
    stdout_output = state.posix.dumps(1)
    return stdout_output.find(b'Success') > -1

def should_abort(state):
    stdout_output = state.posix.dumps(1)
    return stdout_output.find(b'Failure') > -1


simgr = project.factory.simgr(initial_state, **simgr_kwargs)
simgr.explore(find=is_successful, avoid=should_abort)

